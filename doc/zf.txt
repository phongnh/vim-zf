*zf.txt*  Run zf asynchronously in a Vim terminal window.

==============================================================================
INTRODUCTION                                                          *vim-zf*

vim-zf provides commands for quickly navigating to files under a directory,
jumping to lines matching a pattern using a grep command, opening |:buffers|,
tags generated by ctags, |:help| tags, |:oldfiles|, as well as |:marks| using
the fuzzy-searcher https://github.com/natecraddock/zf.

The terminal buffer is opened either in a normal window at the bottom of the
screen or in a |popup-window|.

==============================================================================
COMMANDS                                                         *zf-commands*

:ZfFind [dir]                                                        *:ZfFind*
            Find files recursively under the directory [dir], open the
            selected file in the current window.

            The file-search command can be specified through |g:zf.findcmd|
            (see below).

            If [dir] is omitted, the search is performed in the current
            working directory (as obtained by |getcwd()|).

:ZfGrep {args}                                                       *:ZfGrep*
            Find lines matching the pattern specified with {args} using a grep
            command, jump to the selected location in the current window.

            The grep-search command can be specified with |g:zf.grepcmd|. The
            grep-output is parsed with |g:zf.grepformat| (see below).

            Note: special characters like % and # in {args} are expanded
            before the grep command is invoked. To avoid that insert a
            backslash before the character. See |cmdline-special| for more
            details.

:ZfBuffer[!]                                                       *:ZfBuffer*
            List buffers (same as |:ls|), edit the selected buffer in current
            window.

            Add ! to show all existing buffers (listed and unlisted buffers).
            This is similar to the |:ls|! output.

:ZfArgs                                                              *:ZfArgs*
            List the global |argument-list|, edit the selected file in the
            current window.

:ZfLargs                                                            *:ZfLargs*
            List the local |argument-list| (local to the window), edit the
            selected file in the current window.

:ZfOldfiles                                                      *:ZfOldfiles*
            List |:oldfiles|, edit the selected file in the current window.

:ZfTjump                                                            *:ZfTjump*
            List tags from all tags files, jump to the selected tag in the
            current window. This is similar to |:tjump|.

:ZfMarks[!]                                                         *:ZfMarks*
            List marks (same as |:marks|), jump to the selected mark in the
            current window.

            Add ! to jump to the selected mark without changing the jumplist
            when jumping within the current buffer.

:ZfHelp                                                              *:ZfHelp*
            List all help tags, jump to the selected tag in a new |split|.
            The Command can be preceded by a command modifier (see below).

            Note that Vim does not provide any commands to open a help page in
            the current window.

                                                           *zf-commands-split*
Each command has a related command that opens the selected item in a new
|split|.

*:ZfFindSplit*
            Same as |:ZfFind|, but opens the selected file in a new |split|.
*:ZfGrepSplit*
            Same as |:ZfGrep|, but opens the selected file in a new |split|.
*:ZfBufferSplit*
            Same as |:ZfBuffer|, but opens selected buffer in new |split|.
*:ZfArgsSplit*
            Same as |:ZfArgs|, but opens the selected file in new |split|.
*:ZfLargsSplit*
            Same as |:ZfLargs|, but opens the selected file in new |split|.
*:ZfOldfilesSplit*
            Same as |:ZfOldfiles|, but opens selected file in new |split|.
*:ZfTjumpSplit*
            Same as |:ZfTjump|, but opens the selected tag in new |split|.
*:ZfMarksSplit*
            Same as |:ZfMarks|, but jump to the selected mark in new |split|.

The commands can be preceded by a command modifier. For example, to open the
selected file in a new |vertical| split, run >
    :vert ZfFindSplit [dir]
<
    Possible modifiers:
        |vertical|
        |tab|
        |topleft|
        |botright|
        |leftabove|  (same as |aboveleft|)
        |rightbelow| (same as |belowright|)

==============================================================================
CONFIGURATION                                                      *zf-config*

                                                                        *g:zf*
Options can be passed to zf through the |Dictionary| variable g:zf. The
following options are supported:

    height                                                       *g:zf.height*
            The height of the interface in rows. This is equivalent to
            zf's "--height" option.
            Default: 10

    term_highlight                                       *g:zf.term_highlight*
            Highlighting for the terminal window.
            Default: |hl-Terminal|

    popupwin                                                   *g:zf.popupwin*
            If true, zf is opened in a |popup-terminal|. The appearance of
            the popup window can be specified through the "popup" entry (see
            below).
            Default: |v:false|

    popup                                                         *g:zf.popup*
            Dictionary for setting the appearance of the popup window.
            Default: `{'padding': [0,1,0,1], 'border': [], 'minwidth': 80}`

            The following popup options are supported:
            "line", "col", "pos", "minwidth", "drag", "resize", "close",
            "padding", "border", "borderhighlight", "borderchars",
            "highlight", and "zindex". For more details on each entry see
            |popup-usage| as well as the examples below.

    findcmd                                                     *g:zf.findcmd*
            Set the find executable for the |:ZfFind| and |:ZfFindSplit|
            commands. Example: >
                g:zf = {findcmd: 'fd --type f'}
<
            The file-search command is always run in the specified search
            directory to avoid long file paths.

            If no |g:zf.findcmd| is specified, the default find(1) executable
            is used: >
                find
                  -name '.*'
                  -a '!' -name .
                  -a '!' -name .gitignore
                  -a '!' -name .vim
                  -a -prune
                  -o '(' -type f -o -type l ')'
                  -a -print 2> /dev/null
                | cut -b3-
<
            Broken down the expression means:
                - ignore all files and directories starting with a dot,
                - except for the current directory, .gitignore and .vim
                - list only files and symlinks
                - the cut(1) command will remove the leading "./" from all
                  file paths

    grepcmd                                                     *g:zf.grepcmd*
            Set the grep executable for the |:ZfGrep| and |:ZfGrepSplit|
            commands. Example: >
                g:zf = {grepcmd: 'rg --vimgrep'}
<
            If not specified, defaults to 'grepprg'.

            Note: All arguments passed to |:ZfGrep| and |:ZfGrepSplit| are
            appended to |g:zf.grepcmd|. I.e. running ":ZfGrep foo $PROJECT"
            will run "rg --vimgrep foo $PROJECT" in the 'shell' before passing
            the output to zf.

    grepformat                                               *g:zf.grepformat*
            Set the format string for parsing the fuzzy-selected grep-output
            line. This is a scanf-like string that uses the same format as the
            'grepformat' option. Example: >
                g:zf = {
                    grepcmd: 'rg --vimgrep',
                    grepformat: '%f:%l:%c:%m'
                }
<
            If not specified, defaults to 'grepformat'.

    histadd                                                     *g:zf.histadd*
            Add the Ex command to Vim's command-line history.
            Default: |v:false|

==============================================================================
CONFIGURATION EXAMPLES                                    *zf-config-examples*

1. Display 15 items: >
    g:zf = {
        height: 15,
    }

2. Same as 1. but display zf in a popup window, use the default popup
   options: >
    g:zf = {
        height: 15,
        popupwin: true
    }

3. Use a custom popup border and custom highlighting: >
    g:zf = {
        height: 15,
        term_highlight: 'NormalDark',
        popupwin: true,
        popup: {
            minwidth: 90,
            highlight: 'NormalDark',
            borderchars: ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
            padding: [0, 1, 0, 1],
            borderhighlight: ['GreyDark']
        }
    }

4. Same as 3. but don't draw a popup border: >
    g:zf = {
        height: 15,
        term_highlight: 'NormalDark',
        popupwin: true,
        popup: {
            minwidth: 90,
            highlight: 'NormalDark',
            borderchars: [' '],
            padding: [0, 1, 0, 1],
            borderhighlight: ['GreyDark']
        }
    }

5. Display the popup window at the 5th screen line from the top of the
   screen: >
    g:zf = {
        height: 15,
        popupwin: true,
        popup: {
            padding: [0, 1, 0, 1],
            pos: 'topleft',
            line: 5,
        }
    }

6. Find files using fd https://github.com/sharkdp/fd
>
    g:zf = {findcmd: 'fd --type f --type l --exclude tmp'}
<
7. Find files using ripgrep https://github.com/BurntSushi/ripgrep
>
    g:zf = {findcmd: 'rg --files --no-messages'}
<
8. Find files using the_silver_searcher
   https://github.com/ggreer/the_silver_searcher
>
    g:zf = {findcmd: 'ag --silent --ignore __pycache__ -g ""'}
<
9. Find lines that match a pattern using grep(1):
>
    g:zf = {grepcmd: 'grep -Hn', grepformat: '%f:%l:%m'}
<
10. Find lines that match a pattern using ripgrep:
>
    g:zf = {
        grepcmd: 'rg --vimgrep --smart-case --sort path',
        grepformat: '%f:%l:%c:%m'
    }
<
==============================================================================
API                                                                   *zf-api*

                                                                  *zf.Start()*
zf.Start({items}, {callback} [, {options}])
        Run zf asynchronously in a new |terminal-window|. By default the zf
        terminal buffer is opened in a normal window at the bottom of the
        screen.
                                                             *zf-E10* *zf-E11*
        {items} must be a |string| or a |list| of strings. When a string is
        passed, the string will be run as a command in 'shell' and its output
        piped to zf. If {items} is a list, on systems that support FIFOs
        (named pipes), the items are written to a FIFO and passed as stdin to
        zf. On all other systems that do not provide an "mkfifo" command, the
        items are instead written to a temporary file on disk before passed to
        zf.

        {callback} is a |Funcref| that is invoked after an item has been
        selected. The function is called after the terminal window is closed.
        The callback function is called with one argument, the selected item.
        See |zf-api-examples| below.

        {options} is an optional |Dictionary| that can contain the following
        entries:

        "exe"               Path to zf executable.
                            Default: value found in $PATH

        "height"            The height of the interface in rows. Minimum is 3
                            (limited by zf)
                            Default: 10

        "statusline"        Content of the 'statusline' for the terminal
                            window. This entry is used only when zf is
                            displayed in a normal window. Popup windows do not
                            have a statusline, use the "title" entry instead.
                            Default: "zf-term"

        "term_highlight"    Highlight group for the terminal window.
                            Default: |hl-Terminal| (normal window), |hl-Pmenu|
                            (popup window)

        "popupwin"          If true, zf is opened in a |popup-terminal|. The
                            appearance of the popup window can be specified
                            through the "popup" entry (see below).
                            Default: |v:false|

        "popup"             Dictionary for setting popup options. The keys are
                            similar to what is passed to |popup_create()|. The
                            following keys can be used to change the
                            appearance and position of the popup window:
                            "line", "pos", "col", "minwidth", "title", "drag",
                            "resize", "close", "highlight", "padding",
                            "border", "borderhighlight", "borderchars",
                            "zindex". See |popup-usage| for more details.
                            Default: >
                              {
                                'padding': [0,1,0,1],
                                'border': [],
                                'minwidth': 80
                              }
<
        Note: The height of the popup window is set automatically based on
        the "height", "padding" and "border" entries.

        When "popupwin" is set to |v:false|, the terminal window is displayed
        at the bottom and occupy the full width of the Vim window.

        The function returns the buffer number of the terminal window. If
        opening the window fails zero is returned.

zf.Stop()                                                 *zf-E12* *zf.Stop()*
        Stop a running zf process and close the corresponding terminal
        window. The function must be called with focus on a zf terminal
        window. If the buffer is not a terminal window, an error is emitted.
        See |job_stop()| for details.

                                                                       *ft-zf*
The |filetype| of the terminal buffer where zf is running is set to zf.

==============================================================================
EXAMPLES                                                     *zf-api-examples*

Fuzzy-select a |colorscheme|:
>
    import autoload 'zf.vim'

    # Callback function invoked with the selected item
    def Zf_cb(item: string)
        execute 'colorscheme' item
    enddef

    def Setcolors()
        # List of colorschemes
        const items: list<string> = getcompletion('', 'color')
        zf.Start(items, funcref(Zf_cb), {
            exe: expand('~/.local/bin/zf'),
            height: 15,
            statusline: ':colorscheme {name}'
        })
    enddef

    command Color Setcolors()
    nnoremap <Leader>c <ScriptCmd>Setcolors()<CR>
<
 vim:tw=78:et:ft=help:norl:
